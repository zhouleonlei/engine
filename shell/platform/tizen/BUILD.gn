# Copyright 2020 Samsung Electronics Co., Ltd. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//flutter/shell/platform/common/client_wrapper/publish.gni")
import("//flutter/shell/platform/embedder/embedder.gni")
import("//flutter/shell/platform/tizen/config.gni")
import("//flutter/testing/testing.gni")
import("//flutter/vulkan/config.gni")

declare_args() {
  tizen_enable_vulkan = true
}

# Sets the rpath of dependent targets (shared libs) to $ORIGIN.
# libflutter_engine.so should always exist next to the embedder binary.
config("embedder_rpath") {
  ldflags = [ "-Wl,-rpath,\$ORIGIN" ]
}

source_set("flutter_engine") {
  visibility = [ ":*" ]

  libs = [ "flutter_engine" ]

  lib_dirs = [ root_out_dir ]

  public_configs = [ ":embedder_rpath" ]

  deps = [ "//flutter/shell/platform/embedder:flutter_engine" ]
}

_public_headers = [
  "public/flutter_platform_view.h",
  "public/flutter_tizen.h",
]

config("relative_client_wrapper_headers") {
  include_dirs = [ "//flutter/shell/platform/common/client_wrapper/include" ]
}

# Tizen native headers assume that the following include dirs are already
# added to the compiler's search paths. Since we are not using the Tizen CLI
# builder, we have to add them manually.
config("rootstrap_include_dirs") {
  include_dirs = [
    "$custom_sysroot/usr/include",
    "$custom_sysroot/usr/include/appfw",
    "$custom_sysroot/usr/include/base",
    "$custom_sysroot/usr/include/dlog",
    "$custom_sysroot/usr/include/ecore-1",
    "$custom_sysroot/usr/include/ecore-imf-1",
    "$custom_sysroot/usr/include/ecore-input-1",
    "$custom_sysroot/usr/include/ecore-wayland-1",
    "$custom_sysroot/usr/include/ecore-wl2-1",
    "$custom_sysroot/usr/include/efl-1",
    "$custom_sysroot/usr/include/efl-extension",
    "$custom_sysroot/usr/include/eina-1",
    "$custom_sysroot/usr/include/eina-1/eina",
    "$custom_sysroot/usr/include/emile-1",
    "$custom_sysroot/usr/include/eo-1",
    "$custom_sysroot/usr/include/feedback",
    "$custom_sysroot/usr/include/system",
    "$custom_sysroot/usr/include/tzsh",
    "$custom_sysroot/usr/include/wayland-extension",
  ]

  # Contain headers that the Evas_GL renderer depends on.
  include_dirs += [
    "$custom_sysroot/usr/include/ecore-con-1",
    "$custom_sysroot/usr/include/ecore-evas-1",
    "$custom_sysroot/usr/include/ecore-file-1",
    "$custom_sysroot/usr/include/ecore-imf-evas-1",
    "$custom_sysroot/usr/include/ecore-input-evas-1",
    "$custom_sysroot/usr/include/edje-1",
    "$custom_sysroot/usr/include/eet-1",
    "$custom_sysroot/usr/include/efl-1/interfaces",
    "$custom_sysroot/usr/include/efreet-1",
    "$custom_sysroot/usr/include/elementary-1",
    "$custom_sysroot/usr/include/ethumb-1",
    "$custom_sysroot/usr/include/ethumb-client-1",
    "$custom_sysroot/usr/include/evas-1",
  ]

  lib_dirs = [ "$custom_sysroot/usr/lib" ]

  cflags_cc = [
    "-Wno-newline-eof",
    "-Wno-macro-redefined",
  ]
}

config("evas_gl_renderer") {
  defines = [ "TIZEN_RENDERER_EVAS_GL" ]
}

config("evas_vulkan_renderer") {
  defines = [ "SHELL_ENABLE_VULKAN" ]
}

# Template for the embedder build. Used to generate embedders for different
# device profiles.
#
# If use_evas_gl_renderer is provided as true, the Evas_GL renderer is used,
# otherwise the Ecore_Wl2 renderer is used.
template("embedder") {
  forward_variables_from(invoker,
                         [
                           "target_type",
                           "use_evas_gl_renderer",
                           "defines",
                         ])

  target(target_type, target_name) {
    public = _public_headers

    sources = [
      "accessibility_settings.cc",
      "channels/accessibility_channel.cc",
      "channels/app_control.cc",
      "channels/app_control_channel.cc",
      "channels/feedback_manager.cc",
      "channels/key_event_channel.cc",
      "channels/lifecycle_channel.cc",
      "channels/navigation_channel.cc",
      "channels/platform_channel.cc",
      "channels/platform_view_channel.cc",
      "channels/settings_channel.cc",
      "channels/text_input_channel.cc",
      "channels/window_channel.cc",
      "external_texture_pixel_gl.cc",
      "external_texture_surface_gl.cc",
      "flutter_project_bundle.cc",
      "flutter_tizen.cc",
      "flutter_tizen_engine.cc",
      "flutter_tizen_texture_registrar.cc",
      "flutter_tizen_view.cc",
      "logger.cc",
      "system_utils.cc",
      "tizen_event_loop.cc",
      "tizen_input_method_context.cc",
      "tizen_renderer.cc",
    ]

    if (target_name != "flutter_tizen_wearable") {
      sources += [
        "accessibility_bridge_delegate_tizen.cc",
        "flutter_platform_node_delegate_tizen.cc",
      ]
    }

    libs = [
      "base-utils-i18n",
      "capi-appfw-application",
      "capi-appfw-app-common",
      "capi-appfw-app-control",
      "capi-base-common",
      "capi-system-info",
      "capi-system-system-settings",
      "capi-ui-efl-util",
      "dlog",
      "ecore",
      "ecore_imf",
      "ecore_imf_evas",
      "ecore_input",
      "efl-extension",
      "eina",
      "elementary",
      "feedback",
      "tbm",
      "tdm-client",
      "vulkan",
      "wayland-client",
      "EGL",
      "GLESv2",
    ]

    if (target_name == "flutter_tizen_common") {
      sources += [ "channels/tizen_shell.cc" ]

      libs += [
        "tzsh_common",
        "tzsh_softkey",
      ]
    }

    defines += invoker.defines
    defines += [ "FLUTTER_ENGINE_NO_PROTOTYPES" ]

    configs +=
        [ "//flutter/shell/platform/common:desktop_library_implementation" ]

    public_configs = [
      ":relative_client_wrapper_headers",
      ":rootstrap_include_dirs",
      "//flutter:config",
    ]

    if (use_evas_gl_renderer) {
      sources += [
        "flutter_tizen_elementary.cc",
        "tizen_renderer_evas_gl.cc",
        "tizen_view_elementary.cc",
        "tizen_window_elementary.cc",
      ]

      libs += [
        "ecore_evas",
        "elementary",
        "evas",
      ]

      public_configs += [ ":evas_gl_renderer" ]
    } else {
      sources += [
        "flutter_tizen_ecore.cc",
        "tizen_renderer_egl.cc",
        "tizen_vsync_waiter.cc",
        "tizen_window_ecore_wl2.cc",
      ]

      libs += [
        "ecore_wl2",
        "tizen-extension-client",
      ]

      if (tizen_enable_vulkan) {
        public_configs += [
          ":evas_vulkan_renderer",
          "//flutter/vulkan:vulkan_config",
        ]

        source += [ "tizen_context_vulkan.cc" ]
      }
    }
    public_deps = [ ":flutter_engine" ]

    deps = [
      "//flutter/shell/platform/common:common_cpp",
      "//flutter/shell/platform/common:common_cpp_input",
      "//flutter/shell/platform/common:common_cpp_library_headers",
      "//flutter/shell/platform/common/client_wrapper:client_wrapper",
      "//flutter/vulkan",
      "//third_party/dart/runtime:dart_api",
      "//third_party/rapidjson",
      "//third_party/skia",
    ]

    if (target_name != "flutter_tizen_wearable") {
      deps += [ "//flutter/shell/platform/common:common_cpp_accessibility" ]
    }
  }
}

embedder("flutter_tizen_mobile") {
  target_type = "shared_library"
  use_evas_gl_renderer = false

  defines = [ "MOBILE_PROFILE" ]
}

embedder("flutter_tizen_wearable") {
  target_type = "shared_library"
  use_evas_gl_renderer = true

  defines = [ "WEARABLE_PROFILE" ]
}

embedder("flutter_tizen_tv") {
  target_type = "shared_library"
  use_evas_gl_renderer = false

  defines = [ "TV_PROFILE" ]
}

embedder("flutter_tizen_common") {
  target_type = "shared_library"
  use_evas_gl_renderer = false

  defines = [ "COMMON_PROFILE" ]
}

embedder("flutter_tizen_source") {
  target_type = "source_set"
  use_evas_gl_renderer = false

  defines = []
}

test_fixtures("flutter_tizen_fixtures") {
  fixtures = []
}

executable("flutter_tizen_unittests") {
  testonly = true

  sources = [
    "channels/lifecycle_channel_unittests.cc",
    "channels/settings_channel_unittests.cc",
    "flutter_project_bundle_unittests.cc",
    "flutter_tizen_engine_unittest.cc",
    "flutter_tizen_texture_registrar_unittests.cc",
  ]

  ldflags = [ "-Wl,--unresolved-symbols=ignore-in-shared-libs" ]

  deps = [
    ":flutter_tizen_fixtures",
    ":flutter_tizen_source",
    "//flutter/runtime:libdart",
    "//flutter/shell/platform/common:common_cpp",
    "//flutter/shell/platform/common:common_cpp_accessibility",
    "//flutter/shell/platform/common/client_wrapper:client_wrapper",
    "//flutter/shell/platform/embedder:embedder_headers",
    "//flutter/shell/platform/embedder:embedder_test_utils",
    "//flutter/testing",
    "//flutter/vulkan",
    "//third_party/rapidjson",
    "//third_party/skia",
  ]
}

publish_client_wrapper_core("publish_cpp_client_wrapper") {
  visibility = [ ":*" ]
}

_common_cpp_public_headers = [
  "//flutter/shell/platform/common/public/flutter_export.h",
  "//flutter/shell/platform/common/public/flutter_messenger.h",
  "//flutter/shell/platform/common/public/flutter_plugin_registrar.h",
  "//flutter/shell/platform/common/public/flutter_texture_registrar.h",
]

copy("publish_headers_tizen") {
  sources = _public_headers + _common_cpp_public_headers

  outputs = [ "$root_out_dir/public/{{source_file_part}}" ]
}

copy("copy_icu") {
  visibility = [ ":*" ]

  sources = [ "//third_party/icu/flutter/icudtl.dat" ]

  outputs = [ "$root_out_dir/icu/{{source_file_part}}" ]
}

group("tizen") {
  deps = [
    ":copy_icu",
    ":publish_cpp_client_wrapper",
    ":publish_headers_tizen",
  ]
  if (embedder_for_target) {
    deps += [
      ":flutter_tizen_common",
      ":flutter_tizen_mobile",
      ":flutter_tizen_tv",
      ":flutter_tizen_wearable",
    ]
  }
}
